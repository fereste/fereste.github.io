{"version":3,"sources":["Pistas.jsx","bombachas.js","Finder.jsx","App.js","serviceWorker.js","index.js"],"names":["caracteristicas","Pistas","props","react_default","a","createElement","name","Select_default","onChange","e","id","target","value","fullWidth","map","item","index_es","key","concat","bombachasData","nombre","Finder","find","_this","pistas","length","Fragment","slice","x","filter","bombachas","filtradas","forEach","bombacha","every","pista","includes","push","caracteristicasRepetidas","c","caracteristica","sort","y","className","toFixed","container","wrap","spacing","this","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","add","state","newId","reduce","max","i","setState","remove","handleChange","_this2","src_Pistas","onClick","icons_index_es","color","Finder_Finder","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.986643c7.chunk.js","sourcesContent":["import React from 'react'\r\nimport Select from '@material-ui/core/Select';\r\nimport { MenuItem } from '@material-ui/core';\r\n\r\nconst caracteristicas = [\r\n    '1 color', '2 colores', '2+ colores', 'Agujeritos', 'Azul', 'Beige', 'Blanca', 'Clara', 'Corazones', 'Dibujos',\r\n    'Encaje', 'Estrellas', 'Formas geométricas', 'Gris', 'Lisa', 'Lunares', 'Moñitos', 'Negra', 'Oscura', 'Palmeras', 'Piel',\r\n    'Plateada', 'Puntitos', 'Rayas', 'Rayitas', 'Roja', 'Rosa', 'Sin costuras', 'Super lisa', 'Transparencia',\r\n];\r\n\r\nconst Pistas = props => {\r\n    return (\r\n        <div>\r\n            <span>{props.name}</span>\r\n            <Select\r\n                onChange={(e) => props.onChange(props.id, e.target.value)}\r\n                value={props.value}\r\n                fullWidth\r\n            >\r\n                {caracteristicas.map(item => (<MenuItem key={`${props.id}${item}`} value={item}>{item}</MenuItem>))}\r\n            </Select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pistas\r\n","const bombachasData = [\r\n    { nombre: 'Gris lisa', caracteristicas: ['Clara', 'Lisa', '1 color', 'Gris'] },\r\n    { nombre: 'Beige lisa', caracteristicas: ['Clara', 'Lisa', '1 color', 'Beige'] },\r\n    { nombre: 'Gris con puntitos', caracteristicas: ['Clara', 'Lisa', '1 color', 'Puntitos', 'Gris'] },\r\n    { nombre: 'Color piel', caracteristicas: ['Lisa', 'Super lisa', '1 color', 'Piel', 'Clara'] },\r\n    { nombre: 'Negra mitad encaje mitad lisa', caracteristicas: ['Negra', 'Lisa', 'Encaje', '2 colores', 'Moñitos', 'Rosa', 'Oscura'] },\r\n    { nombre: 'Roja con corazón de agujeritos', caracteristicas: ['Roja', 'Lisa', 'Agujeritos', '1 color', 'Corazones', 'Oscura', 'Dibujos'] },\r\n    { nombre: 'Roja con rayitas', caracteristicas: ['1 color', 'Lisa', 'Rayas', 'Rayitas', 'Roja', 'Oscura',] },\r\n    { nombre: 'Roja con rayas', caracteristicas: ['1 color', 'Lisa', 'Rayas', 'Roja', 'Oscura',] },\r\n    { nombre: 'Roja con corazones', caracteristicas: ['2 colores', 'Roja', 'Blanca', 'Dibujos', 'Corazones', 'Oscura',] },\r\n    { nombre: 'Roja con corazones dibujados', caracteristicas: ['2 colores', 'Roja', 'Blanca', 'Dibujos', 'Corazones', 'Oscura',] },\r\n    { nombre: 'Negra con rayas plateadas', caracteristicas: ['Negra', 'Plateada', 'Rayas', '2 colores', 'Oscura',] },\r\n    { nombre: 'Sin costuras', caracteristicas: ['Sin costuras', 'Oscura', 'Formas geométricas', '2+ colores',] },\r\n    { nombre: 'Roja con lunares', caracteristicas: ['2 colores', 'Roja', 'Blanca', 'Formas geométricas', 'Oscura', 'Lunares',] },\r\n    { nombre: 'Rosa con agujeritos', caracteristicas: ['Clara', 'Lisa', 'Rosa', 'Agujeritos', '1 color',] },\r\n    { nombre: 'Rosa con encaje', caracteristicas: ['Clara', 'Rosa', 'Encaje', 'Lisa', '1 color',] },\r\n    { nombre: 'Rosa con rayas horizontales', caracteristicas: ['2 colores', 'Rosa', 'Rayas',] },\r\n    { nombre: 'Negra con corazones rojos bordados', caracteristicas: ['Negra', 'Oscura', '2 colores', 'Transparencia', 'Roja', 'Corazones', 'Dibujos',] },\r\n    { nombre: 'Estrellas', caracteristicas: ['2 colores', 'Negra', 'Azul', 'Estrellas', 'Dibujos',] },\r\n    { nombre: 'Palmeras', caracteristicas: ['Clara', 'Negra', 'Palmeras', 'Dibujos', 'Beige',] }\r\n];\r\n\r\nexport default bombachasData;\r\n","import React, { Component } from 'react'\r\nimport bombachasData from './bombachas'\r\nimport './App.css'\r\nimport { Grid } from '@material-ui/core';\r\n\r\nexport default class Finder extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.find()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    find = () => {\r\n        if (this.props.pistas.length === 0)\r\n            return <></>;\r\n\r\n        const pistas = this.props.pistas.slice().map(x => x.value).filter(x => x !== '');\r\n        const bombachas = bombachasData.slice();\r\n\r\n        let filtradas = [];\r\n        bombachas.forEach(bombacha => {\r\n            if (pistas.every(pista => bombacha.caracteristicas.includes(pista)))\r\n                filtradas.push(bombacha);\r\n        });\r\n\r\n        let caracteristicasRepetidas = [];\r\n        filtradas.forEach(bombacha => bombacha.caracteristicas.forEach(c => {\r\n            let caracteristica = caracteristicasRepetidas.find(x => x.name === c);\r\n            if (caracteristica) {\r\n                caracteristica.value++;\r\n            }\r\n            else {\r\n                caracteristicasRepetidas.push({ name: c, value: 1 });\r\n            }\r\n        }));\r\n        caracteristicasRepetidas = caracteristicasRepetidas.sort((x, y) => y.value - x.value);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"bombachas\">\r\n                    {filtradas.map(x => <div key={x.nombre}>{x.nombre}</div>)}\r\n                </div>\r\n                <div>\r\n                    Hay {filtradas.length} bombachas ({(1 / filtradas.length).toFixed(2)}%)\r\n                    <Grid container wrap spacing={16}>\r\n                        {caracteristicasRepetidas.map(x => (\r\n                            <Grid item>{x.value} {x.name}</Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Pistas from './Pistas'\nimport Finder from './Finder'\nimport { Button } from '@material-ui/core';\nimport { Add, Remove } from '@material-ui/icons'\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            pistas: [{ id: 0, value: '' }]\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div>\n                    {this.state.pistas.map(x => (\n                        <Pistas key={x.id} onChange={this.handleChange} id={x.id} value={x.value} />\n                    ))}\n                </div>\n\n                <div className=\"buttons\">\n                    <Button onClick={this.remove}>\n                        <Remove />\n                    </Button>\n                    <Button onClick={this.add} color='primary'>\n                        <Add />\n                    </Button>\n                </div>\n                <div>\n                    <Finder pistas={this.state.pistas} />\n                </div>\n            </div>\n        );\n    }\n\n    add = () => {\n        let pistas = this.state.pistas.slice();\n        const newId = pistas.map(x => x.id).reduce((max, i) => max > i ? max : i, 0) + 1;\n        pistas.push({ id: newId, value: '' });\n        this.setState({ pistas: pistas });\n    }\n\n    remove = () => {\n        this.setState({ pistas: this.state.pistas.slice(0, this.state.pistas.length - 1) });\n    }\n\n    handleChange = (id, value) => {\n        const pistas = this.state.pistas.slice();\n        pistas.find(x => x.id === id).value = value;\n        this.setState({ pistas: pistas });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}